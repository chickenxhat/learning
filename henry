pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

local game_objects

function _init()
	-- create the game objects
	game_objects={}
	-- create a player
	make_player(64,64)
	-- create mom
	make_mom(74,64)
	-- create dad
	make_dad(90,64)
	-- create some coins
	local i
	--for i=1,3 do
	--	make_coin(30+15*i,80)
	--end
	-- create barrier boundary objects
	for i=5,12 do
		make_barrier(0,8*i)
	end
	for i=5,12 do
		make_barrier(8*15,8*i)
	end
	for i=9,11 do
		make_barrier(8*3,8*i)
	end
	for i=9,11 do
		make_barrier(8*4,8*i)
	end
	for i=4,6 do
		make_barrier(8*5,8*i)
	end
	for i=4,6 do
		make_barrier(8*10,8*i)
	end
	for i=2,4 do
		make_barrier(8*i,8*3)
	end
	for i=11,13 do
		make_barrier(8*i,8*3)
	end
	for i=6,7 do
		make_barrier(8*i,8*6)
	end
	for i=2,4 do
		make_barrier(8*i,8*14)
	end
	for i=5,10 do
		make_barrier(8*i,8*15)
	end
	make_barrier(8*1,8*4)
	make_barrier(8*1,8*13)
	make_barrier(8*8,8*5)
	make_barrier(8*9,8*6)
	make_barrier(8*11,8*14)
	make_barrier(8*12,8*15)
	make_barrier(8*13,8*14)
	make_barrier(8*14,8*4)
	make_barrier(8*14,8*13)
end

function _update()
	local obj
	-- update all the game objects
	for obj in all(game_objects) do
		obj:update()
	end
end

function _draw()
	-- clear the screen
	cls(12)
	-- draw map as background
	map(0,0,0,0)
	-- draw all the game objects
	local obj
	for obj in all(game_objects) do
		obj:draw()
	end
end

-- game object creation functions
function make_player(x,y)
	return make_game_object("player",x,y,{
    width=8,
		height=8,
		radius=8,
		move_speed=1,
    spritecounterup=0,
    spritecounterdown=0,
    spritecounterleft=0,
    spritecounterright=0,
		update=function(self)
			-- apply friction
			self.velocity_x*=.1
      self.velocity_y*=.1
      -- move up
      if btn(2) then
        self.velocity_y-=self.move_speed
      end
      --move down
      if btn(3) then
        self.velocity_y+=self.move_speed
      end
      -- move left
      if btn(0) then
        self.velocity_x=-self.move_speed
      end
      -- move right
      if btn(1) then
        self.velocity_x=self.move_speed
      end
			-- apply the velocity
			self.x+=self.velocity_x
			self.y+=self.velocity_y
			-- check to see if hitting coins
			for_each_game_object("coin",function(coin)
				if self:check_for_hit(coin) and not coin.is_collected then
					coin.is_collected=true
					sfx(4)
				end
			end)
			-- check to see if colliding with barriers
			for_each_game_object("barrier",function(barrier)
				local collision_dir=self:check_for_collision(barrier,3.1)
				self:handle_collision(barrier,collision_dir)
			end)
			-- check to see if colliding with mom
			for_each_game_object("mom",function(mom)
				local collision_dir=self:check_for_collision(mom,3.1)
				self:handle_collision(mom,collision_dir)
			end)
			-- check to see if colliding with dad
			for_each_game_object("dad",function(dad)
				local collision_dir=self:check_for_collision(dad,3.1)
				self:handle_collision(dad,collision_dir)
			end)
		end,
		draw=function(self)
			local walking
			--self.walking=false
			if not self.walking then
				sprite_num=1
			end
			-- self:draw_bounding_box(7)
      if btn(2) then
				self.walking=true
        self.spritecounterup += 1
        if self.spritecounterup > 0 then
         sprite_num = 4
        end
        if self.spritecounterup > 4 then
         sprite_num = 5
        end
        if self.spritecounterup > 8 then
         sprite_num = 4
        end
        if self.spritecounterup > 12 then
         sprite_num = 6
        end
        if self.spritecounterup > 16 then
         self.spritecounterup = 0
        end
      end
      if btn(3) then
				self.walking=true
        self.spritecounterdown += 1
        if self.spritecounterdown > 0 then
         sprite_num = 1
        end
        if self.spritecounterdown > 4 then
         sprite_num = 2
        end
        if self.spritecounterdown > 8 then
         sprite_num = 1
        end
        if self.spritecounterdown > 12 then
         sprite_num = 3
        end
        if self.spritecounterdown > 16 then
         self.spritecounterdown = 1
        end
      end
      if btn(0) then
				self.walking=true
        self.spritecounterleft += 1
        if self.spritecounterleft > 0 then
          sprite_num = 10
        end
        if self.spritecounterleft > 4 then
          sprite_num = 11
        end
        if self.spritecounterleft > 8 then
          sprite_num = 10
        end
        if self.spritecounterleft > 12 then
          sprite_num = 12
        end
        if self.spritecounterleft > 16 then
          self.spritecounterleft = 1
        end
      end
      if btn(1) then
				self.walking=true
        self.spritecounterright += 1
        if self.spritecounterright > 0 then
         sprite_num = 7
        end
        if self.spritecounterright > 4 then
          sprite_num = 8
        end
        if self.spritecounterright > 8 then
          sprite_num = 7
        end
        if self.spritecounterright > 12 then
          sprite_num = 9
        end
        if self.spritecounterright > 16 then
          self.spritecounterright = 1
        end
      end
			spr(sprite_num,self.x,self.y,1,1)
		end,
	})
end

function mom_chat(x,y)
end

function make_mom(x,y)
	return make_game_object("mom",x,y,{
		width=8,
		height=8,
		radius=8,
		draw=function(self)
			spr(29,self.x,self.y)
		end,
	})
end

function make_dad(x,y)
	return make_game_object("dad",x,y,{
		width=8,
		height=8,
		radius=8,
		draw=function(self)
			spr(45,self.x,self.y)
		end
	})
end

function make_barrier(x,y)
	return make_game_object("barrier",x,y,{
		width=8,
		height=8,
		draw=function(self)
			spr(0,self.x,self.y)
		end
	})
end

function make_coin(x,y)
	return make_game_object("coin",x,y,{
		width=6,
		height=7,
		is_collected=false,
		draw=function(self)
			if not self.is_collected then
				spr(23,self.x,self.y)
			end
		end
	})
end

function make_game_object(name,x,y,props)
	local obj={
		name=name,
		x=x,
		y=y,
		velocity_x=0,
		velocity_y=0,
		update=function(self)
			-- do nothing
		end,
		draw=function(self)
			-- don't draw anything
		end,
		draw_bounding_box=function(self,color)
			rect(self.x,self.y,self.x+self.width,self.y+self.height,color)
		end,
		center=function(self)
			return self.x+self.width/2,self.y+self.height/2
		end,
		check_for_hit=function(self,other)
			return bounding_boxes_overlapping(self,obj)
		end,
		check_for_collision=function(self,other,indent)
			local x,y,w,h=self.x,self.y,self.width,self.height
			local top_hitbox={x=x+indent,y=y,width=w-2*indent,height=h/2}
			local bottom_hitbox={x=x+indent,y=y+h/2,width=w-2*indent,height=h/2}
			local left_hitbox={x=x,y=y+indent,width=w/2,height=h-2*indent}
			local right_hitbox={x=x+w/2,y=y+indent,width=w/2,height=h-2*indent}
			if bounding_boxes_overlapping(bottom_hitbox,other) then
				return "down"
			elseif bounding_boxes_overlapping(left_hitbox,other) then
				return "left"
			elseif bounding_boxes_overlapping(right_hitbox,other) then
				return "right"
			elseif bounding_boxes_overlapping(top_hitbox,other) then
				return "up"
			end
		end,
		handle_collision=function(self,other,dir)
			if dir=="down" then
				self.y=other.y-self.height
				if self.velocity_y>0 then
					self.velocity_y=0
				end
			elseif dir=="left" then
				self.x=other.x+other.width
				if self.velocity_x<0 then
					self.velocity_x=0
				end
			elseif dir=="right" then
				self.x=other.x-self.width
				if self.velocity_x>0 then
					self.velocity_x=0
				end
			elseif dir=="up" then
				self.y=other.y+other.height
				if self.velocity_y<0 then
					self.velocity_y=0
				end
			end
		end
	}
	-- add additional properties
	local key,value
	for key,value in pairs(props) do
		obj[key]=value
	end
	-- add it to the list of game objects
	add(game_objects,obj)
	-- return the game object
	return obj
end

-- title screen / menus / levels

function draw_background()
	map(16,0,0,0)
end

-- hit detection helper functions
function rects_overlapping(left1,top1,right1,bottom1,left2,top2,right2,bottom2)
	return right1>left2 and right2>left1 and bottom1>top2 and bottom2>top1
end

function bounding_boxes_overlapping(obj1,obj2)
	return rects_overlapping(obj1.x,obj1.y,obj1.x+obj1.width,obj1.y+obj1.height,obj2.x,obj2.y,obj2.x+obj2.width,obj2.y+obj2.height)
end

function circles_overlapping(x1,y1,r1,x2,y2,r2)
	local dx=x2-x1
	local dy=y2-y1
	return dx*dx+dy*dy<(r1+r2)*(r1+r2)
end

function for_each_game_object(name,callback)
	local obj
	for obj in all(game_objects) do
		if obj.name==name then
			callback(obj)
		end
	end
end

__gfx__
00000000009999000099990000999900009999000099990000999900000999900009999000099990099990000999900009999000004000040040090400409004
00000000009f9900009f9900009f990000999900009999000099990000999990009999900099999009999900099999000999990000540945005498950054a9a5
00000000001ff100001ff100001ff100009999000099990000999900009f1ff0009f1ff0009f1ff00ff1f9000ff1f9000ff1f900000894800008498000094890
0000000000ffff0000ffff0000ffff000099990000999900009999000009fff00009fff00009fff00fff90000fff90000fff900000045840000498400008a940
00000000088888800888888008888880088888800888888008888880000888800008888000088880088880000888800008888000004500540045005400450054
000000000f8888f0008888f00f8888000f8888f00f888800008888f00008f88000f8888f00f8888f088f8000f8888f00f8888f00005000050050000500500005
00000000005555000055550000555500005555000055550000555500000555500005555000055550055550000555500005555000000000000000000000000000
00000000005005000050000000000500005005000000050000500000000500500050000500005500050050005000050000550000000000000000000000000000
99999999000000000000000000000000000000000000000077777777000000000000000000000000000000000000000000000000009999000009999009999000
9aaaaaa900000000000000000000000000000000000000007666666d009aa0000000000000000000000000000000000000000000099f99900099f99999f99900
9aaaaaa900000000000000000000000000000000000000007677776d09aaaa000000000000000000000000000000000000000000091ff1900091ff1991ff1900
9aaaaaa9000000000000000000000000000000000000000076766d6d09aaaa00000000000000000000000000000000000000000009ffff90009ffff99ffff900
9aaaaaa9000000000000000000000000000000000000000076766d6d09aaaa000000000000000000000000000000000000000000092662900092662992662900
9aaaaaa9000000000000000000000000000000000000000076dddd6d09aaaa000000000000000000000000000000000000000000f922229f0f922229922229f0
9aaaaaa900000000000000000000000000000000000000007666666d009aa000000000000000000000000000000000000000000000dddd00000dddd00dddd000
999999990000000000000000000000000000000000000000dddddddd00000000000000000000000000000000000000000000000000d00d0000d00d0000d00d00
000bbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffff0000ffff0000ffff00
00110bb0000bbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffff0000ffff0000ffff00
002200b000110bb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ff100001ff100001ff100
022200b0002200b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004444000044440000444400
022200b0022200b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cccccc00cccccc00cccccc0
000000b0022200b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fccccf00fccccf00fccccf0
00000bb000000bb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005555000055550000555500
0033333000333330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f00f0000f00f0000f00f00
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
35b333333333333333333333333333333333333300000000000000ffff0000003333333333333333000003333330000022222222222222222777777233333332
5b3b35b333383333333333333333b3b333333333000000000000000ff00000003333333333333333003333333333330066666666666666666755557633333362
3b333b5b33b3b3333333333333333b33333333330000000000000000000000005333333333333335033333333333333066666666666666666761157633333262
3333333b333b3333333333333333333333333333000000000000000000000000f33333333333333f033333333333333066666666666666666761157633336262
335b333338333333333333333333333333333353000000000000000000000000f33333533533333f033333333333333022222222222222222761157233336262
33b33333b3b33383333333333b3b333335335353000000000000000000000000ff535353353535ff333333333333333366666666666666666766647633333262
b33b3b333b333b3b3333333333b3333355f55ff50000000000000000000000000ff5ff5ff5ff5ff03333333333333333666666666b66b6b66766657633333362
5bb5b333333333b33333333333333333ffffffff000000000000000000000000000ffffffffff000333333333333333366666666bb3bb3b36766657633333332
3333333333333333333355555555555533333333d444444000007000ffdddddd0000000000000000000000000000000062626262626262626262626200000000
33366633333a33333333333333333333333333330555555000070700f00000000000000000000000000000000000000062626262626262666262626200000000
6636663333b3b333333355555555555533333333d4444440000000000000dddd0000000000000000000000000000000066626262626262666262626200000000
66366633333b33333333333333333333333333330555555007000000000000000000000000000000000000000000000066626262626266666262626200000000
333333333a333333333333555555555534444443d444444070700000000000dd00000ddd00000000000000000000000022222262626222226262626200005555
36663333b3b333a33333333333333333355555530555555000000000000000000000000000000000000000000000000066666262626666666262626200555555
366636633b333b3b333333335555555554444445d4444440000000000000000000dddddd00000000000000000000000066666662626666666262626207555555
33333663333333b33333333333333333f555555f0500005000000000000000000000000000000000000000000000000066666662666666666262626267777777
43434343333333333333333333555555000000000000000000000000000000000000000000000000000000000777777022222222222222222222222200000000
34343434333333333333333333333333000000000000000000000000000000000000000000000000000000006666666666666666666666666777777700000000
43444444333333333333335533335555000000000000000000000070000000000000000000000000000000007777777766666666666666666755755700000000
34444444333333333333333333333333000000000000000000000707000000000000000000000000000000007777777766666666666666666755755700000000
43444444333333333333555533333355000000000000000000000000000000000000000000000000000000007777777722222222222222222777777755550000
34444444333333333333333333333333000000000000000000070000000000000000000000000000000000007777777766666666666666666755755755555500
434444443333333333335555333333330000000000000000007070000000000000000000000000000000000077777777b666b666b666b6b66755755755555570
344444443333333333333333333333330000000000000000000000000000000000000000000000000000000004000040b33bb3b33b3bb3b36777777777777772
43444444444444434343434343444444444444430000000000000000000000000000000055555555555555550000000062000000000000000000006263333333
34444444444444343434343434444444444444340000000000000000000000000000000055555555444444440000000062620000000000000000626262333333
43444444444444434444444343444444444444430000000000000000000000000000000055455555555555550000000062626200000ddddddd62626262633333
34444444444444344444443434444444444444340000000000000000000000000000000055555555444444440000000062626262000000006262626262623333
43444444444444434444444343444444444444430000000000000000000000000000000055555455555555556200000062626262dddddd626262626262623333
34444444444444344444443434444444444444340000000000000000000000000000000055555555444444446262000062626262000062626262626262633333
43434343434343434444444343444444444444430000000000000000000000000000000055555555555555556262620062626262dd6262626262626262333333
34343434343434344444443434444444444444340000000000000000000000000000000055555555444444446262626262626262626262626262626263333333
77777777777777770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
75555555744444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
75555555744444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
75555555744444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
75555555744444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
75555555744444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
75555555744444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
75555555744444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
454545454545455f6f4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45454545587d7e5e5e7c7b454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45454a62534c4c4c4c4c4c42424b454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
454a4252534c6e4c4c4c4c4242424b4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45424142636d4d4d4e4d6c424242424545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4542424342424242504242424342424545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4542424242424142504242424242424545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4542426072424242505042424242424545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4542427374425142425042414251424545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4542517071424242425050424242424545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4548424242424243424250505042494545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4546484444424242424142445449474545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454546484444444449575545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010a0000180501a0501c0502405024050240502405024050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011300001b0661b0661b0661b0641b0671b0641b0630d0000d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01100000180551a0551c0552405024040240302402024010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0108000011440114411344114431174311b4211f42125411004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400
01070000180551c0551f0552405024031240110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000001144000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400
